// <auto-generated />
using System;
using FYP_Link.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FYP_Link.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250725154140_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FYP_Link.Models.AcademicProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("AcademicPrograms");
                });

            modelBuilder.Entity("FYP_Link.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e57a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a18be9c0-aa65-4af8-bd17-00bd9344e57c",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEZXQJGDm/Zq+YxDFhLhQbYIhYYBRvX2KwGGGpZZOQzGHgXYoQB0J7LxVJXZBQUJZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a18be9c0-aa65-4af8-bd17-00bd9344e57b",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "b18be9c0-aa65-4af8-bd17-00bd9344e501",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c18be9c0-aa65-4af8-bd17-00bd9344e701",
                            Email = "lecturer1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LECTURER1@EXAMPLE.COM",
                            NormalizedUserName = "LECTURER1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEZXQJGDm/Zq+YxDFhLhQbYIhYYBRvX2KwGGGpZZOQzGHgXYoQB0J7LxVJXZBQUJZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b18be9c0-aa65-4af8-bd17-00bd9344e601",
                            TwoFactorEnabled = false,
                            UserName = "lecturer1@example.com"
                        },
                        new
                        {
                            Id = "b18be9c0-aa65-4af8-bd17-00bd9344e502",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c18be9c0-aa65-4af8-bd17-00bd9344e702",
                            Email = "lecturer2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LECTURER2@EXAMPLE.COM",
                            NormalizedUserName = "LECTURER2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEZXQJGDm/Zq+YxDFhLhQbYIhYYBRvX2KwGGGpZZOQzGHgXYoQB0J7LxVJXZBQUJZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b18be9c0-aa65-4af8-bd17-00bd9344e602",
                            TwoFactorEnabled = false,
                            UserName = "lecturer2@example.com"
                        },
                        new
                        {
                            Id = "b18be9c0-aa65-4af8-bd17-00bd9344e503",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c18be9c0-aa65-4af8-bd17-00bd9344e703",
                            Email = "lecturer3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LECTURER3@EXAMPLE.COM",
                            NormalizedUserName = "LECTURER3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEZXQJGDm/Zq+YxDFhLhQbYIhYYBRvX2KwGGGpZZOQzGHgXYoQB0J7LxVJXZBQUJZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b18be9c0-aa65-4af8-bd17-00bd9344e603",
                            TwoFactorEnabled = false,
                            UserName = "lecturer3@example.com"
                        },
                        new
                        {
                            Id = "b18be9c0-aa65-4af8-bd17-00bd9344e504",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c18be9c0-aa65-4af8-bd17-00bd9344e704",
                            Email = "lecturer4@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LECTURER4@EXAMPLE.COM",
                            NormalizedUserName = "LECTURER4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEZXQJGDm/Zq+YxDFhLhQbYIhYYBRvX2KwGGGpZZOQzGHgXYoQB0J7LxVJXZBQUJZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b18be9c0-aa65-4af8-bd17-00bd9344e604",
                            TwoFactorEnabled = false,
                            UserName = "lecturer4@example.com"
                        },
                        new
                        {
                            Id = "b18be9c0-aa65-4af8-bd17-00bd9344e505",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c18be9c0-aa65-4af8-bd17-00bd9344e705",
                            Email = "lecturer5@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LECTURER5@EXAMPLE.COM",
                            NormalizedUserName = "LECTURER5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEZXQJGDm/Zq+YxDFhLhQbYIhYYBRvX2KwGGGpZZOQzGHgXYoQB0J7LxVJXZBQUJZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b18be9c0-aa65-4af8-bd17-00bd9344e605",
                            TwoFactorEnabled = false,
                            UserName = "lecturer5@example.com"
                        },
                        new
                        {
                            Id = "b18be9c0-aa65-4af8-bd17-00bd9344e506",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c18be9c0-aa65-4af8-bd17-00bd9344e706",
                            Email = "lecturer6@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LECTURER6@EXAMPLE.COM",
                            NormalizedUserName = "LECTURER6@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEZXQJGDm/Zq+YxDFhLhQbYIhYYBRvX2KwGGGpZZOQzGHgXYoQB0J7LxVJXZBQUJZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b18be9c0-aa65-4af8-bd17-00bd9344e606",
                            TwoFactorEnabled = false,
                            UserName = "lecturer6@example.com"
                        },
                        new
                        {
                            Id = "b18be9c0-aa65-4af8-bd17-00bd9344e507",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c18be9c0-aa65-4af8-bd17-00bd9344e707",
                            Email = "lecturer7@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LECTURER7@EXAMPLE.COM",
                            NormalizedUserName = "LECTURER7@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEZXQJGDm/Zq+YxDFhLhQbYIhYYBRvX2KwGGGpZZOQzGHgXYoQB0J7LxVJXZBQUJZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b18be9c0-aa65-4af8-bd17-00bd9344e607",
                            TwoFactorEnabled = false,
                            UserName = "lecturer7@example.com"
                        },
                        new
                        {
                            Id = "b18be9c0-aa65-4af8-bd17-00bd9344e508",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c18be9c0-aa65-4af8-bd17-00bd9344e708",
                            Email = "lecturer8@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LECTURER8@EXAMPLE.COM",
                            NormalizedUserName = "LECTURER8@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEZXQJGDm/Zq+YxDFhLhQbYIhYYBRvX2KwGGGpZZOQzGHgXYoQB0J7LxVJXZBQUJZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b18be9c0-aa65-4af8-bd17-00bd9344e608",
                            TwoFactorEnabled = false,
                            UserName = "lecturer8@example.com"
                        },
                        new
                        {
                            Id = "b18be9c0-aa65-4af8-bd17-00bd9344e509",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c18be9c0-aa65-4af8-bd17-00bd9344e709",
                            Email = "lecturer9@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LECTURER9@EXAMPLE.COM",
                            NormalizedUserName = "LECTURER9@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEZXQJGDm/Zq+YxDFhLhQbYIhYYBRvX2KwGGGpZZOQzGHgXYoQB0J7LxVJXZBQUJZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b18be9c0-aa65-4af8-bd17-00bd9344e609",
                            TwoFactorEnabled = false,
                            UserName = "lecturer9@example.com"
                        },
                        new
                        {
                            Id = "b18be9c0-aa65-4af8-bd17-00bd9344e510",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c18be9c0-aa65-4af8-bd17-00bd9344e710",
                            Email = "lecturer10@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LECTURER10@EXAMPLE.COM",
                            NormalizedUserName = "LECTURER10@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEZXQJGDm/Zq+YxDFhLhQbYIhYYBRvX2KwGGGpZZOQzGHgXYoQB0J7LxVJXZBQUJZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b18be9c0-aa65-4af8-bd17-00bd9344e610",
                            TwoFactorEnabled = false,
                            UserName = "lecturer10@example.com"
                        });
                });

            modelBuilder.Entity("FYP_Link.Models.CommitteeMembership", b =>
                {
                    b.Property<int>("LecturerId")
                        .HasColumnType("integer");

                    b.Property<int>("AcademicProgramId")
                        .HasColumnType("integer");

                    b.HasKey("LecturerId");

                    b.HasIndex("AcademicProgramId");

                    b.ToTable("CommitteeMemberships");
                });

            modelBuilder.Entity("FYP_Link.Models.Lecturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CurrentPosition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Domain")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Lecturers");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            ApplicationUserId = "b18be9c0-aa65-4af8-bd17-00bd9344e501",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentPosition = "SeniorLecturer",
                            Department = "Information Technology",
                            Name = "Dr. Lecturer 1",
                            StaffId = "STAFF00001"
                        },
                        new
                        {
                            Id = 102,
                            ApplicationUserId = "b18be9c0-aa65-4af8-bd17-00bd9344e502",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentPosition = "AssociateProfessor",
                            Department = "Software Engineering",
                            Name = "Dr. Lecturer 2",
                            StaffId = "STAFF00002"
                        },
                        new
                        {
                            Id = 103,
                            ApplicationUserId = "b18be9c0-aa65-4af8-bd17-00bd9344e503",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentPosition = "Professor",
                            Department = "Data Science",
                            Name = "Dr. Lecturer 3",
                            StaffId = "STAFF00003"
                        },
                        new
                        {
                            Id = 104,
                            ApplicationUserId = "b18be9c0-aa65-4af8-bd17-00bd9344e504",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentPosition = "Lecturer",
                            Department = "Cybersecurity",
                            Name = "Dr. Lecturer 4",
                            StaffId = "STAFF00004"
                        },
                        new
                        {
                            Id = 105,
                            ApplicationUserId = "b18be9c0-aa65-4af8-bd17-00bd9344e505",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentPosition = "SeniorLecturer",
                            Department = "Computer Science",
                            Name = "Dr. Lecturer 5",
                            StaffId = "STAFF00005"
                        },
                        new
                        {
                            Id = 106,
                            ApplicationUserId = "b18be9c0-aa65-4af8-bd17-00bd9344e506",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentPosition = "AssociateProfessor",
                            Department = "Information Technology",
                            Name = "Dr. Lecturer 6",
                            StaffId = "STAFF00006"
                        },
                        new
                        {
                            Id = 107,
                            ApplicationUserId = "b18be9c0-aa65-4af8-bd17-00bd9344e507",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentPosition = "Professor",
                            Department = "Software Engineering",
                            Name = "Dr. Lecturer 7",
                            StaffId = "STAFF00007"
                        },
                        new
                        {
                            Id = 108,
                            ApplicationUserId = "b18be9c0-aa65-4af8-bd17-00bd9344e508",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentPosition = "Lecturer",
                            Department = "Data Science",
                            Name = "Dr. Lecturer 8",
                            StaffId = "STAFF00008"
                        },
                        new
                        {
                            Id = 109,
                            ApplicationUserId = "b18be9c0-aa65-4af8-bd17-00bd9344e509",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentPosition = "SeniorLecturer",
                            Department = "Cybersecurity",
                            Name = "Dr. Lecturer 9",
                            StaffId = "STAFF00009"
                        },
                        new
                        {
                            Id = 110,
                            ApplicationUserId = "b18be9c0-aa65-4af8-bd17-00bd9344e510",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentPosition = "AssociateProfessor",
                            Department = "Computer Science",
                            Name = "Dr. Lecturer 10",
                            StaffId = "STAFF00010"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e576",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e577",
                            Name = "Supervisor",
                            NormalizedName = "SUPERVISOR"
                        },
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e578",
                            Name = "Evaluator",
                            NormalizedName = "EVALUATOR"
                        },
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e579",
                            Name = "Committee",
                            NormalizedName = "COMMITTEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e57a",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            UserId = "b18be9c0-aa65-4af8-bd17-00bd9344e501",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e577"
                        },
                        new
                        {
                            UserId = "b18be9c0-aa65-4af8-bd17-00bd9344e502",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e577"
                        },
                        new
                        {
                            UserId = "b18be9c0-aa65-4af8-bd17-00bd9344e503",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e577"
                        },
                        new
                        {
                            UserId = "b18be9c0-aa65-4af8-bd17-00bd9344e504",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e577"
                        },
                        new
                        {
                            UserId = "b18be9c0-aa65-4af8-bd17-00bd9344e505",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e577"
                        },
                        new
                        {
                            UserId = "b18be9c0-aa65-4af8-bd17-00bd9344e506",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e577"
                        },
                        new
                        {
                            UserId = "b18be9c0-aa65-4af8-bd17-00bd9344e507",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e577"
                        },
                        new
                        {
                            UserId = "b18be9c0-aa65-4af8-bd17-00bd9344e508",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e577"
                        },
                        new
                        {
                            UserId = "b18be9c0-aa65-4af8-bd17-00bd9344e509",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e577"
                        },
                        new
                        {
                            UserId = "b18be9c0-aa65-4af8-bd17-00bd9344e510",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e577"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FYP_Link.Models.CommitteeMembership", b =>
                {
                    b.HasOne("FYP_Link.Models.AcademicProgram", "AcademicProgram")
                        .WithMany()
                        .HasForeignKey("AcademicProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FYP_Link.Models.Lecturer", "Lecturer")
                        .WithOne()
                        .HasForeignKey("FYP_Link.Models.CommitteeMembership", "LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicProgram");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("FYP_Link.Models.Lecturer", b =>
                {
                    b.HasOne("FYP_Link.Models.ApplicationUser", "ApplicationUser")
                        .WithOne()
                        .HasForeignKey("FYP_Link.Models.Lecturer", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FYP_Link.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FYP_Link.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FYP_Link.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FYP_Link.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
